# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
name: R CI/CD test #R-CMD-check

on:
  push:
    branches: [main, master]
    paths-ignore:
      - '**.md'  # prevent md files (e.g., README.md) in any repo dir from trigering workflow
      - '**.bib'
      - '**.ya?ml'  # captures both .yml and .yaml
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [master, develop]
    paths-ignore:
      - '**.md'
      - '**.bib'
      - '**.ya?ml'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:  # also allow manual trigger, for testing purposes

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release'}
          - {os: windows-latest, r: 'release'}
          #- {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-latest,   r: 'release'}
          - {os: ubuntu-latest,   r: 'oldrel-1'}

    env:
      #GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }} 
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@v1

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v1
        with:
          extra-packages: |
            rcmdcheck
            devtools

      - uses: r-lib/actions/check-r-package@v1

      - name: Build and validate models
        run: |
          require(devtools)
          devtools::load_all()
          for (modelname in c("USEEIOv2.0", "USEEIOv2.0i-GHG_nodisagg", "USEEIOv2.0s-GHG", "USEEIOv2.0.1")) {
          m <- useeior::buildModel(modelname)
          
          print("-----")
          print(paste("Validation for ", modelname))
          print("Validate that commodity output can be recalculated (within 1%) with the model total requirements matrix (L) and demand vector (y) for US production")
          econval <- compareOutputandLeontiefXDemand(m, tolerance = 0.01)
          print(paste("Number of sectors passing:",econval$N_Pass))
          print(paste("Number of sectors failing:",econval$N_Fail))
          print(paste("Sectors failing:", paste(unique(econval$Failure$rownames), collapse = ", ")))
          
          print("Validate that commodity output can be recalculated (within 1%) with model total domestic requirements matrix (L_d) and model demand (y) for US production")
          econval <- compareOutputandLeontiefXDemand(m,use_domestic=TRUE, tolerance = 0.01)
          print(paste("Number of sectors passing:",econval$N_Pass))
          print(paste("Number of sectors failing:",econval$N_Fail))
          print(paste("Sectors failing:", paste(unique(econval$Failure$rownames), collapse = ", ")))
          
          print("Validate that flow totals by commodity (E_c) can be recalculated (within 1%) using the model satellite matrix (B), market shares matrix (V_n), total requirements matrix (L), and demand vector (y) for US production")
          modelval <- compareEandLCIResult(m, tolerance = 0.01)
          print(paste("Number of flow totals by commodity passing:",modelval$N_Pass))
          print(paste("Number of flow totals by commodity failing:",modelval$N_Fail))
          
          print("Validate that flow totals by commodity (E_c) can be recalculated (within 1%) using the model satellite matrix (B), market shares matrix (V_n), total domestic requirements matrix (L_d), and demand vector (y) for US production")
          dom_val <- compareEandLCIResult(m, use_domestic=TRUE, tolerance = 0.01)
          print(paste("Number of flow totals by commodity passing:",dom_val$N_Pass))
          print(paste("Number of flow totals by commodity failing:",dom_val$N_Fail))
          print(paste("Sectors with flow totals failing:", paste(unique(dom_val$Failure$variable), collapse = ", ")))  

          print("Validate that commodity output are properly transformed to industry output via MarketShare")
          q_x_val <- compareCommodityOutputXMarketShareandIndustryOutputwithCPITransformation(m, tolerance = 0.01)
          print(paste("Number of flow totals by commodity passing:",q_x_val$N_Pass))
          print(paste("Number of flow totals by commodity failing:",q_x_val$N_Fail))
          print(paste("Sectors with flow totals failing:", paste(unique(q_x_val$Failure$rownames), collapse = ", ")))
          
          print("Validate that commodity output equals to domestic use plus production demand")
          q_val <- compareCommodityOutputandDomesticUseplusProductionDemand(m, tolerance = 0.01)
          print(paste("Number of flow totals by commodity passing:",q_val$N_Pass))
          print(paste("Number of flow totals by commodity failing:",q_val$N_Fail))
          print(paste("Sectors with flow totals failing:", paste(unique(q_val$Failure$rownames), collapse = ", ")))
          print("-----")
          }
        shell: Rscript {0}
      
      #- name: Show testthat output
      #  if: always()  # step will run even if previous steps fail
      #  run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
      #  shell: bash

      - name: Upload check results
        if: failure()  # if any of the previous steps fail, export a log
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check    
    
